new_line='\n'

# Based on https://github.com/mathiasbynens/dotfiles/blob/main/.bash_prompt
function prompt_git() {
  local ps1_exit=$?
  if [ $ps1_exit -eq 0 ]; then
    ps1_status="${3}"
  else
    ps1_status="${4}"
  fi

  local __stats=''
  local branchName=''
  local isIn_A_gitRepo=''
  local __number_of_unstaged=0
  local __number_of_untracked=0
  local __number_of_stashed_files=0
  local __count_print='{'

  # Check if the current directory is in a Git repository.
  isIn_A_gitRepo=$(
    git rev-parse --is-inside-work-tree &> /dev/null
    echo "${?}"
  )

  if [ "${isIn_A_gitRepo}" == '0' ]; then
    branchName="$(
      git symbolic-ref --quiet --short HEAD 2> /dev/null ||
        git describe --all --exact-match HEAD 2> /dev/null ||
        git rev-parse --short HEAD 2> /dev/null ||
        echo '(unknown)'
    )"

    # Check for uncommitted changes in the index.
    if ! (git diff --quiet --ignore-submodules --cached); then
      __number_of_newly_staged="$(git status --short | grep --count '^[AMR]')"
      if [[ "${__number_of_newly_staged}" -gt 0 ]]; then
        __count_print+="${CYANBOLD}${__number_of_newly_staged} "
        __stats+="${CYANBOLD}+"
      fi

      __number_of_staged_delete="$(git status --short | grep --count '^[D]')"
      if [[ "${__number_of_staged_delete}" -gt 0 ]]; then
        __count_print+="${YELLOW}-${__number_of_staged_delete} "
        __stats+="${YELLOW}-"
      fi
    fi
    # Check for unstaged changes.
    if ! (git diff-files --quiet --ignore-submodules); then
      __number_of_unstaged="$(git diff-files --name-only | wc -l)"
      __count_print+="${BOLD}${LIGHT_RED}${__number_of_unstaged} "
      __stats+="${BOLD}${LIGHT_RED}!"
    fi
    # Check for untracked files.
    if [ -n "$(git status --short | grep '^??')" ]; then
      __number_of_untracked="$(git status -s | grep --count '^??')"
      __count_print+="${BOLD}${SALMON}${__number_of_untracked} "
      __stats+="${BOLD}${SALMON}?"
    fi
    # Check for stashed files.
    if (git rev-parse --verify refs/stash &> /dev/null); then
      __number_of_stashed_files=$(
        git stash list --name-only |
          # Remove empty lines
          sed '/^$/d' |
          # list only file name and count them
          grep --word-regexp --invert-match --count 'stash@{[0-9]*}:'
      )
      __count_print+="${BOLD}${BROWN}${__number_of_stashed_files} "
      __stats+="${BOLD}${BROWN}$"
    fi

    [ -n "${__stats}" ] && {
      # '\b \b' remove the last character (here the last space in __count_print)
      __count_print+="\b \b${WHITEBOLD}}"
      __stats="${WHITEBOLD}[${__stats}${WHITEBOLD}]"
      __stats=" ${__stats}-->${__count_print}"
    }
    echo -en "${1}${branchName}${2}${__stats}${RESET}"
  fi
  printf "\n%s" "${ps1_status}\$"
}

function prompt_status() {
  local ps1_exit=$?

  if [ $ps1_exit -eq 0 ]; then
    ps1_status="${1}"
  else
    ps1_status="${2}"
  fi
  printf "${3}%s" "${ps1_status}\$"
}

function use_prompt() {
  PS1="\$(prompt_status \"\[${GREEN}\]\" \"\[${LIGHT_RED}\]\")" # Git repository details and $
  PS1+="\[${RESET}\] "
}

function use_simple_prompt() {
  PS1="\[\#\] "
  PS1+="\[${BOLD}${BLUE}\]\u"
  PS1+="\[${RESET}\]@"
  PS1+="\[${yellow}\]\h"
  PS1+="\$(prompt_status \"\[${GREEN}\]\" \"\[${LIGHT_RED}\]\")" # Git repository details and $
  PS1+="\[${RESET}\] "
}
function use_the_simpliest_prompt() {
  # Set the terminal title to the current working directory.
  PS1="\[${CYAN}\#\] "
  PS1+="\[${yellow}\]\W/\] "                                                     # working directory base name
  PS1+="\$(prompt_status \"\[${GREEN}\]\" \"\[${LIGHT_RED}\]\" \"${new_line}\")" # Git repository details and $
  PS1+=" \[${RESET}\]"                                                           # and RESET color
}

function use_the_simpliest_prompt_with_git() {
  # Set the terminal title to the current working directory.
  PS1="\[${CYAN}\#\] "
  PS1+="\[${yellow}\]\W/\] "                                                                                                     # working directory base name
  PS1+="\$(prompt_git \"\[${WHITEBOLD}\] on \[${YELLOWBOLD}\]\" \"\[${LIGHT_REDBOLD}\]\" \"\[${GREEN}\]\" \"\[${LIGHT_RED}\]\")" # Git repository details and $
  PS1+=" \[${RESET}\]"                                                                                                           # and RESET color
}

function use_normal_user_prompt() {
  PS1="\[\#\] "
  PS1+="\[${BOLD}\]"
  PS1+="\[${CYAN}\]\u" # username
  PS1+="\[${WHITE}\]@"
  PS1+="\[${LIGHT_RED}\]\h" # host
  PS1+="\[${WHITE}\]:"
  PS1+="\[${GREEN}\] \w" # working directory full path
  PS1+="\[${CYAN}\]\n\\$"
  PS1+=" \[${RESET}\]" # and RESET color
}

function use_normal_user_prompt_with_git() {
  PS1="\[${WHITEBOLD}\]"
  PS1+="[\#] "
  PS1+="\[${CYANBOLD}\]\u" # username
  PS1+="\[${GRAYBOLD}\] at "
  PS1+="\[${RESET}\]"
  PS1+="\[${BOLD}${LIGHT_RED}\]\h" # host
  PS1+="\[${GRAYBOLD}\]:"
  PS1+="\[${RESET}\]"
  PS1+="\[${GREENBOLD}\]\w"                                                                                                      # working directory full path
  PS1+="\$(prompt_git \"\[${WHITEBOLD}\] on \[${YELLOWBOLD}\]\" \"\[${LIGHT_REDBOLD}\]\" \"\[${GREEN}\]\" \"\[${LIGHT_RED}\]\")" # Git repository details and $
  PS1+="\[${RESET}\] "                                                                                                           # and RESET color
}

if [ "$UID" -ge 0 ]; then
  # use_prompt
  # use_simple_prompt
  # use_the_simpliest_prompt
  # use_the_simpliest_prompt_with_git
  # use_normal_user_prompt
  use_normal_user_prompt_with_git
fi
export PS1
export PS2="\001${CYANBOLD}\002  ...:\001$RESET\002 "
